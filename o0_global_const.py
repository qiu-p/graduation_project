import numpy as np
"""
    initial state for compressor tree drawed by the paper 
    "RL-MUL: Multiplier Design Optimization with Deep Reinforcement Learning"
"""

InitialState = {
    # "8_bits": np.array([[0,0,1,1,2,2,3,3,3,3,3,3,2,1,1,1], # 32 compressors
    #     [0,0,0,1,1,1,0,0,0,0,0,0,1,2,2,1]]), # matrix representation with stage information compressed; 22 compressors
	"8_bits_booth": np.array([ 
		[0,0,1,1,2,2,3,3,3,3,3,3,2,1,1,1],
		[1,2,1,1,1,1,0,0,0,0,0,0,1,2,2,1]
	]),
    "16_bits_booth": np.array(
        [[0,0,1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,7,7,7,6,6,5,5,4,3,4,2,2,1,1,1],
        [0,0,0,1,1,2,2,2,3,2,3,2,1,1,2,1,1,1,1,1,2,1,2,1,2,3,1,3,3,4,4,3]]
    ),
	"16_bits_and": np.array([ 
		[0,0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,13,13,12,11,10,9,8,6,6,5,3,3,1,1,0],
		[0,1,1,1,1,3,3,2,3,3,3,1,2,2,0,3,2,1,1,1,1,1,1,3,2,2,4,3,5,4,4]
	]),
	# "16_bits_and": np.array([ 
	# 	[0,0,1,2,3,4,5,5,7,8,8,9,10,11,12,13,13,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
	# 	[0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	# ]),
	"32_bits_booth": np.array([ 
		[0,0,1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,9,10,9,11,11,11,12,13,12,13,13,15,15,15,15,15,15,14,14,14,12,12,12,12,10,10,10,9,9,8,8,7,6,7,5,5,5,4,3,4,2,2,1,1,1],
		[1,2,2,3,3,3,2,3,4,3,4,3,2,2,3,2,3,2,3,2,1,3,1,1,2,1,0,2,2,3,1,1,1,1,1,1,2,1,0,2,2,1,0,2,2,1,2,1,2,1,2,3,1,3,3,2,3,4,2,4,4,5,5,4]
	]),
	"64_bits_and": np.array([ 
		[0,0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,15,17,17,18,20,19,21,22,23,24,26,26,27,28,30,29,31,32,32,34,35,37,37,39,39,40,41,41,43,44,46,46,47,48,48,51,50,52,53,54,56,56,57,58,60,60,61,61,60,59,60,58,57,55,55,54,53,52,51,50,48,48,47,47,46,43,43,41,41,40,40,38,37,36,35,33,33,32,31,31,28,28,27,27,25,23,23,21,21,20,20,18,17,16,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1,0],
		[0,1,1,1,1,3,4,3,5,6,6,5,6,6,4,7,6,6,4,5,5,3,6,5,5,5,5,3,4,4,4,2,5,4,4,6,5,5,3,4,2,3,3,3,5,4,4,2,3,3,3,5,2,5,4,4,4,2,3,3,3,1,2,2,2,3,4,1,2,2,4,3,3,3,3,3,3,5,4,4,2,1,4,3,5,4,4,2,3,3,3,3,5,4,4,4,2,5,4,4,2,3,5,4,6,5,5,3,4,4,4,6,5,5,5,5,5,5,5,7,6,6,8,7,9,8,8]
	]),
	"64_bits_booth": np.array([
		[0,0,1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,9,10,9,11,11,11,12,13,12,13,13,15,15,15,16,17,17,17,17,19,19,19,20,20,20,22,22,21,23,24,24,24,25,26,26,26,26,27,28,29,28,30,30,30,31,31,31,31,31,30,30,29,28,28,28,27,27,27,26,25,25,24,23,23,23,22,21,22,21,21,19,19,19,18,18,18,16,16,16,15,14,14,14,14,12,12,12,12,10,10,10,9,9,8,8,7,6,7,5,5,5,4,3,4,2,2,1,1,1],
		[1,2,2,3,3,4,4,4,5,5,6,5,4,4,5,4,5,4,5,4,3,5,3,3,4,3,2,4,4,5,3,3,4,3,2,2,3,4,2,2,3,2,3,4,2,2,5,3,2,2,3,2,1,1,2,3,3,2,1,3,1,1,2,1,1,1,1,1,2,1,2,3,3,2,3,2,1,1,2,1,2,3,3,2,3,4,2,2,1,3,3,2,3,2,1,3,3,2,3,4,4,3,2,4,4,3,2,4,4,3,4,3,4,3,4,5,3,5,5,4,5,6,4,6,6,7,7,6]
	]),
    # "64_bits_booth": np.array([ 
	# 	[0,0,1,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,31,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1],
	# 	[0,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]
	# ]),
    # "8_bits_and": np.array(
    #     [[0,0,1,2,2,4,4,5,6,5,3,3,1,0,0],
    #     [0,0,0,0,1,0,1,2,0,0,2,1,3,4,3]]
    # )
    "8_bits_and": np.array(
        [[0,0,1,2,2,4,5,6,5,5,4,2,2,1,0],
        [0,1,1,1,3,1,1,0,1,0,0,2,1,1,1]]
    ),
    # "32_bits_and": np.array(
    #     [
    #         [0,0,1,2,3,4,4,5,6,7,9,9,10,12,13,13,14,15,16,17,18,18,20,22,22,23,24,25,27,28,28,30,30,30,28,28,27,26,24,23,22,21,20,18,18,17,17,15,14,13,13,12,10,10,9,8,6,5,4,4,3,1,1],
    #         [0,1,1,1,1,0,1,1,1,1,0,1,2,1,0,1,1,1,1,1,1,3,2,0,1,1,1,1,0,0,2,1,1,0,2,1,1,0,1,1,1,1,1,3,2,2,0,1,1,1,0,0,2,1,1,0,1,1,1,0,0,1,0]
    #     ]
    # )
    "32_bits_and": np.array(
        [
            [0,0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,15,17,17,18,20,19,21,22,23,24,26,26,27,28,30,28,28,28,27,27,25,23,23,21,21,20,20,18,17,16,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1,0],
            [0,0,0,0,0,2,3,2,4,5,5,3,4,4,2,5,4,4,2,3,3,1,4,3,3,3,3,1,2,2,2,0,3,3,2,2,0,1,3,2,4,3,3,1,2,2,2,4,3,3,3,3,3,3,3,5,4,4,6,5,7,6,6]
        ]
    )
}

GOMILInitialState = {
	"16_bits_and": np.array([ 
		[0,0,1,2,3,4,5,5,7,8,8,9,10,11,12,13,13,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
		[0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	]),
    "64_bits_booth": np.array([ 
		[0,0,1,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,31,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1],
		[0,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]
	]),
	"32_bits_and": np.array([ 
		[0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,29,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
		[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	]),
	"64_bits_and": np.array([ 
		[0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
		[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	]),
    "8_bits_booth": np.array([ 
		[0,0,1,1,2,2,3,3,3,3,3,3,2,2,1,1],
		[0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0]
	]),
    "16_bits_booth": np.array([ 
		[0,0,1,2,2,3,3,3,4,4,4,5,5,6,6,7,7,7,7,7,6,6,5,5,4,4,3,3,2,2,1,1],
		[0,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0]
	]),
    "32_bits_booth": np.array([ 
		[0,0,1,1,2,3,3,4,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1],
		[0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]
	]),
	"8_bits_and": np.array([ 
		[0,0,1,2,3,4,4,6,5,5,4,3,2,1,0],
		[0,0,0,0,0,0,1,0,1,0,0,0,0,0,0]
	]),
}

# xxl-modify-begin: 添加 dadda 压缩树
DaddaInitialState = {
	"8_bits_and": np.array([
		[0,0,0,1,2,3,4,5,5,5,4,3,2,1,0,],
		[0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,],
	]),
	"8_bits_booth": np.array([
		[0,0,0,1,1,2,2,3,3,3,3,3,2,2,1,1,],
		[0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,],
	]),
	"16_bits_and": np.array([
		[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13,12,11,10,9,8,7,6,5,4,3,2,1,0,],
		[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
	]),
	"16_bits_booth": np.array([
		[0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7,7,7,6,6,5,5,4,4,3,3,2,2,1,1,],
		[0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,],
	]),
	"32_bits_and": np.array([
		[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,29,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,],
		[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
	]),
	"32_bits_booth": np.array([
		[0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,],
		[0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,],
	]),
	"64_bits_and": np.array([
		[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,],
		[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
	]),
	"64_bits_booth": np.array([
		[0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,31,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,],
		[0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,],
	]),
}
# xxl-modify-end


# "32_bits_and": np.array(
#         [
#             1,2(1),3(4,1),4(6,1),5(8,3,1),6(10,4,2),7(11,4,2),8(13,5,2),
#             9(15,5,2),10(17,6,2),11(19,7,3,1),12(21,7,3,2),13(23,8,3,1),14(26,9,3,1),15(28,10,4,2),16(29,10,4,2),
#             17(31,11,4,2),18(33,11,4,2),19(35,12,4,2),20(37,13,5,2),21(39,13,5,2),22(41,14,5,2),23(44,15,5,2),24(46,16,6,2),
#             25(47,16,6,2),26(49,17,6,2),27(51,17,6,2),28(53,18,6,2),29(55,19,7,3,1),30(57,19,7,3,1),31(59,20,7,3,1),32(62,21,7,3,1),
#             31(62,21,7,3,1),30(61,21,7,3,1),29(59,20,7,3,1),28(58,20,7,3,1),27(56,19,7,3,1),26(54,18,6,2),25(51,17,6,2),24(49,17,6,2),
#             23(47,16,6,2),22(45,15,5,2),21(43,15,5,2),20(41,14,5,2),19(40,14,5,2),18(38,13,5,2),17(36,12,4,2),16(33,11,4,2),
#             15(31,11,4,2),14(29,10,4,2),13(27,9,3,1),12(25,9,3,1),11(23,8,3,1),10(22,8,3,1),9(20,7,3,1),8(18,6,2),
#             7(15,5,2),6(13,5,2),5(11,4,2),4(9,3,1),3(7,3,1),2(5,2),1(3,1),0
#         ]
#     )

"""
    wallace tree initial area delay 
    {'area': [430.0, 590.0, 462.0, 462.0], 'delay': [0.8401, 0.7445, 0.7985, 0.7985], 'power': [], 'avg_ppa': 407.5314335556412}
    avg area: 486
    avg delay: 0.7954
    "8_bits_and": np.array(
        [[0,0,1,2,2,4,5,6,5,5,4,2,2,1,0],
        [0,1,1,1,3,1,1,0,1,0,0,2,1,1,1]]
    )
"""

"""
    initial partial product for compressor tree drawed by the paper 
    "RL-MUL: Multiplier Design Optimization with Deep Reinforcement Learning"
"""
DSRFeatureDim = {
    "16_bits_and": 34,
    "32_bits_and": 66
}
PartialProduct = {
    "8_bits_booth": np.array([
        2,2,3,3,4,4,5,5,
        5,5,5,5,4,3,3,2,0
    ]),
    "16_bits_booth": np.array(
        [
            2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,9,9,9,9,
            8,7,7,6,6,5,5,4,4,3,3,2,0
        ]
    ),
	"16_bits_and": np.array([ 
		1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
	]),
    "8_bits_and": np.array(
        [
            1,2,3,4,5,6,7,8,
            7,6,5,4,3,2,1,0
        ]
    ),
    "32_bits_and": np.array(
        [
            1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,
            31,30,29,28,27,26,25,24,
            23,22,21,20,19,18,17,16,
            15,14,13,12,11,10,9,8,
            7,6,5,4,3,2,1,0
        ]
    ),
	"32_bits_booth": np.array([
		2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,
		17,17,17,17,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,0
	]),
	"64_bits_and": np.array([ 
		1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,
		63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
	]),
	"64_bits_booth": np.array([ 
		2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,
		33,33,33,33,32,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,0
	])
}

IntBitWidth = {
    "8_bits_and": 7.5,
    "8_bits_booth": 8,
    "16_bits_and": 15.5,
    "16_bits_booth": 16,
    "32_bits_and": 31.5,
    "32_bits_booth": 32,
    "64_bits_and": 63.5,
    "64_bits_booth": 64
}

StrBitWidth = {
    "8_bits_and": 8,
    "8_bits_booth": 8,
    "16_bits_and": 16,
    "16_bits_booth": 16,
    "32_bits_and": 32,
    "32_bits_booth": 32,
    "64_bits_and": 64,
    "64_bits_booth": 64
}

"""
    MAC Initial state and Partial product
"""
MacInitialState={ 
	"8_bits_and": np.array([ 
		[0,1,2,3,3,4,6,6,6,5,3,3,1,1,0],
		[1,1,1,0,2,2,0,1,0,0,2,1,3,2,2]
	]),
	"8_bits_booth": np.array([ 
		[1,1,2,2,3,3,3,4,3,4,3,3,2,1,1,1],
		[0,1,1,2,1,1,2,1,2,0,1,1,2,3,3,2]
	]),
	"16_bits_and": np.array([ 
		[0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1,0],
		[1,1,1,1,3,3,2,3,3,3,1,2,2,0,3,2,1,1,1,1,1,1,1,3,2,2,4,3,5,4,4]
	]),
	"16_bits_booth": np.array([ 
		[1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,7,7,7,6,6,5,5,4,3,4,2,2,1,1,1],
		[0,1,1,2,2,2,3,2,3,2,1,1,2,1,2,1,0,1,1,1,2,1,2,1,2,3,1,3,3,4,4,3]
	]),
	"32_bits_and": np.array([ 
		[0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,15,17,17,18,20,19,21,22,23,24,26,26,27,28,30,29,30,28,28,27,27,25,23,23,21,21,20,20,18,17,16,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1,0],
		[1,1,1,1,3,4,3,4,5,5,3,4,4,2,5,4,4,2,3,3,1,4,3,3,3,3,1,2,2,2,0,3,1,3,2,2,0,1,3,2,4,3,3,1,2,2,2,4,3,3,3,3,3,3,3,5,4,4,6,5,7,6,6]
	]),
	"32_bits_booth": np.array([ 
		[1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,9,10,9,11,11,11,12,13,12,13,13,15,15,15,16,16,15,15,15,14,14,14,12,12,12,12,10,10,10,9,9,8,8,7,6,7,5,5,5,4,3,4,2,2,1,1,1],
		[0,1,1,2,2,3,4,3,4,3,2,2,3,2,3,2,3,2,1,3,1,1,2,1,0,2,2,3,1,1,2,1,0,1,1,1,2,1,0,2,2,1,0,2,2,1,2,1,2,1,2,3,1,3,3,2,3,4,2,4,4,5,5,4]
	]),
	"64_bits_and": np.array([ 
		[0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,15,17,17,18,20,19,21,22,23,24,26,26,27,28,30,29,31,32,32,34,35,37,37,39,39,40,41,41,43,44,46,46,47,48,48,51,50,52,53,54,56,56,57,58,60,60,61,61,61,60,60,60,59,57,55,55,54,53,52,51,50,48,48,47,47,46,43,43,41,41,40,40,38,37,36,35,33,33,32,31,31,28,28,27,27,25,23,23,21,21,20,20,18,17,16,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1,0],
		[1,1,1,1,3,4,3,5,6,6,5,6,6,4,7,6,6,4,5,5,3,6,5,5,5,5,3,4,4,4,2,5,4,4,6,5,5,3,4,2,3,3,3,5,4,4,2,3,3,3,5,2,5,4,4,4,2,3,3,3,1,2,2,4,4,5,4,2,1,2,4,3,3,3,3,3,3,5,4,4,2,1,4,3,5,4,4,2,3,3,3,3,5,4,4,4,2,5,4,4,2,3,5,4,6,5,5,3,4,4,4,6,5,5,5,5,5,5,5,7,6,6,8,7,9,8,8]
	]),
	"64_bits_booth": np.array([ 
		[1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,9,10,9,11,11,11,12,13,12,13,13,15,15,15,16,17,17,17,17,19,19,19,20,20,20,22,22,21,23,24,24,24,25,26,26,26,26,27,28,29,28,30,30,30,31,31,31,31,32,32,31,30,30,29,28,28,28,27,27,27,26,25,25,24,23,23,23,22,21,22,21,21,19,19,19,18,18,18,16,16,16,15,14,14,14,14,12,12,12,12,10,10,10,9,9,8,8,7,6,7,5,5,5,4,3,4,2,2,1,1,1],
		[0,1,1,2,2,3,5,5,6,5,4,4,5,4,5,4,5,4,3,5,3,3,4,3,2,4,4,5,3,3,4,3,2,2,3,4,2,2,3,2,3,4,2,2,5,3,2,2,3,2,1,1,2,3,3,2,1,3,1,1,2,1,2,3,3,1,0,1,2,1,2,3,3,2,3,2,1,1,2,1,2,3,3,2,3,4,2,2,1,3,3,2,3,2,1,3,3,2,3,4,4,3,2,4,4,3,2,4,4,3,4,3,4,3,4,5,3,5,5,4,5,6,4,6,6,7,7,6]
	]),
}
MacPartialProduct={ 
	"8_bits_and": np.array([ 
		2,3,4,5,6,7,8,9,
		7,6,5,4,3,2,1,0,
	]),
	"8_bits_booth": np.array([ 
		3,3,4,4,5,5,6,6,
		5,5,5,5,4,3,3,2,0,
	]),
	"16_bits_and": np.array([ 
		2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
		15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,
	]),
	"16_bits_booth": np.array([ 
		3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,
		9,9,9,9,8,7,7,6,6,5,5,4,4,3,3,2,0,
	]),
	"32_bits_and": np.array([ 
		2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,
		31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,
	]),
	"32_bits_booth": np.array([ 
		3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,
		17,17,17,17,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,0,
	]),
	"64_bits_and": np.array([ 
		2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,
		63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,
	]),
	"64_bits_booth": np.array([ 
		3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,
		33,33,33,33,32,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,0,
	]),
}
# MacInitialState={ 
# 	"8_bits_and": np.array([ 
# 		[0,1,2,3,3,4,6,6,6,6,5,3,3,1,1],
# 		[1,1,1,1,2,3,1,2,2,1,1,3,2,4,3]
# 	]),
# 	"8_bits_booth": np.array([ 
# 		[1,1,2,2,3,3,3,4,4,4,4,4,3,3,2,1],
# 		[0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,2]
# 	]),
# 	"16_bits_and": np.array([ 
# 		[0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1],
# 		[1,1,1,1,3,3,2,3,3,3,1,2,2,0,3,2,2,1,1,1,1,1,1,1,3,2,2,4,3,5,4]
# 	]),
# 	"16_bits_booth": np.array([ 
# 		[1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,8,8,8,8,6,7,5,5,5,4,3,4,2,2,1],
# 		[0,1,1,2,2,2,3,2,3,2,1,1,2,1,2,1,1,1,1,1,0,2,0,2,2,1,2,3,1,3,3,4]
# 	]),
# 	"32_bits_and": np.array([ 
# 		[0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,15,17,17,18,20,19,21,22,23,24,26,26,27,28,30,29,30,30,28,28,27,27,25,23,23,21,21,20,20,18,17,16,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1],
# 		[1,1,1,1,3,4,3,4,5,5,3,4,4,2,5,4,4,2,3,3,1,4,3,3,3,3,1,2,2,2,0,3,2,1,3,2,2,0,1,3,2,4,3,3,1,2,2,2,4,3,3,3,3,3,3,3,5,4,4,6,5,7,6]
# 	]),
# 	"32_bits_booth": np.array([ 
# 		[1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,9,10,9,11,11,11,12,13,12,13,13,15,15,15,16,16,16,16,16,16,14,14,14,14,12,12,12,12,10,10,10,9,9,8,8,7,6,7,5,5,5,4,3,4,2,2,1],
# 		[0,1,1,2,2,3,4,3,4,3,2,2,3,2,3,2,3,2,1,3,1,1,2,1,0,2,2,3,1,1,2,1,1,1,1,1,0,2,2,1,0,2,2,1,0,2,2,1,2,1,2,1,2,3,1,3,3,2,3,4,2,4,4,5]
# 	]),
# 	"64_bits_and": np.array([ 
# 		[0,1,2,3,3,4,6,6,7,8,10,10,11,13,12,14,15,17,17,18,20,19,21,22,23,24,26,26,27,28,30,29,31,32,32,34,35,37,37,39,39,40,41,41,43,44,46,46,47,48,48,51,50,52,53,54,56,56,57,58,60,60,61,61,62,61,61,60,60,58,57,55,55,54,53,52,51,50,48,48,47,47,46,43,43,41,41,40,40,38,37,36,35,33,33,32,31,31,28,28,27,27,25,23,23,21,21,20,20,18,17,16,14,14,13,12,11,10,9,8,6,6,5,3,3,1,1],
# 		[1,1,1,1,3,4,3,5,6,6,5,6,6,4,7,6,6,4,5,5,3,6,5,5,5,5,3,4,4,4,2,5,4,4,6,5,5,3,4,2,3,3,3,5,4,4,2,3,3,3,5,2,5,4,4,4,2,3,3,3,1,2,2,4,3,4,3,3,1,2,2,4,3,3,3,3,3,3,5,4,4,2,1,4,3,5,4,4,2,3,3,3,3,5,4,4,4,2,5,4,4,2,3,5,4,6,5,5,3,4,4,4,6,5,5,5,5,5,5,5,7,6,6,8,7,9,8]
# 	]),
# 	"64_bits_booth": np.array([ 
# 		[1,1,2,2,3,3,3,4,4,5,6,6,6,7,7,8,8,9,10,9,11,11,11,12,13,12,13,13,15,15,15,16,17,17,17,17,19,19,19,20,20,20,22,22,21,23,24,24,24,25,26,26,26,26,27,28,29,28,30,30,30,31,31,31,31,32,32,32,32,31,31,29,30,28,28,28,27,27,27,26,25,25,24,23,23,23,22,21,22,21,21,19,19,19,18,18,18,16,16,16,15,14,14,14,14,12,12,12,12,10,10,10,9,9,8,8,7,6,7,5,5,5,4,3,4,2,2,1],
# 		[0,1,1,2,2,3,5,5,6,5,4,4,5,4,5,4,5,4,3,5,3,3,4,3,2,4,4,5,3,3,4,3,2,2,3,4,2,2,3,2,3,4,2,2,5,3,2,2,3,2,1,1,2,3,3,2,1,3,1,1,2,1,2,3,4,3,3,3,2,2,1,3,1,3,3,2,3,2,1,1,2,1,2,3,3,2,3,4,2,2,1,3,3,2,3,2,1,3,3,2,3,4,4,3,2,4,4,3,2,4,4,3,4,3,4,3,4,5,3,5,5,4,5,6,4,6,6,7]
# 	]),
# }
# MacPartialProduct={ 
# 	"8_bits_and": np.array([ 
# 		2,3,4,5,6,7,8,9,
# 		8,7,6,5,4,3,2,1,
# 	]),
# 	"8_bits_booth": np.array([ 
# 		3,3,4,4,5,5,6,6,
# 		6,6,6,6,5,4,4,3,0,
# 	]),
# 	"16_bits_and": np.array([ 
# 		2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
# 		16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,
# 	]),
# 	"16_bits_booth": np.array([ 
# 		3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,
# 		10,10,10,10,9,8,8,7,7,6,6,5,5,4,4,3,0,
# 	]),
# 	"32_bits_and": np.array([ 
# 		2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,
# 		32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,
# 	]),
# 	"32_bits_booth": np.array([ 
# 		3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,
# 		18,18,18,18,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,0,
# 	]),
# 	"64_bits_and": np.array([ 
# 		2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,
# 		64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,
# 	]),
# 	"64_bits_booth": np.array([ 
# 		3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,
# 		34,34,34,34,33,32,32,31,31,30,30,29,29,28,28,27,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,17,17,16,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,0,
# 	]),
# }
"""
    MAC Initial state and Partial product
"""

"""
    备忘wallace tree 8-bit and
    area = (452.0 + 452.0 + 576.0 + 421.0) / 4 = 475.25
    delay = (0.7097 + 0.7097 + 0.6558 + 0.7602) / 4 = 0.70885
"""
"""
    wallace 16-bits booth
        area: 1847.0, 1911.0, 2130.0, 2473.0 = 2090.25
        delay: 1.7257, 1.5771, 1.502, 1.4958 = 1.57515
    wallace 8-bits booth
        area: 517.0, 551.0, 703.0, 595.0
        delay: 1.0827, 1.019, 0.9652, 0.9668
"""
"""
    the stored env initial state pool

    wallace tree 8-bits dqn v2 initial state
    数据地址: outputs/2023-09-18/14-40-49/logger_log/test/dqn8bits_reset_v2_initialstate/dqn8bits_reset_v2_initialstate_2023_09_18_14_40_55_0000--s-0/itr_25.npy

deque([{'state': array([[0, 0, 1, 2, 2, 4, 5, 6, 5, 5, 4, 2, 2, 1, 0],
       [0, 1, 1, 1, 3, 1, 1, 0, 1, 0, 0, 2, 1, 1, 1]]), 'area': 486, 'delay': 0.7954}, {'state': array([[0, 0, 1, 2, 2, 4, 5, 6, 5, 5, 4, 2, 3, 1, 0],
       [0, 1, 1, 1, 3, 1, 1, 0, 1, 0, 0, 2, 0, 1, 1]]), 'area': 489.5, 'delay': 0.7954}, {'state': array([[0, 0, 0, 2, 2, 4, 5, 6, 5, 5, 4, 2, 3, 1, 0],
       [0, 1, 2, 1, 3, 1, 1, 0, 1, 0, 0, 2, 0, 1, 1]]), 'area': 486.0, 'delay': 0.7953999999999999}, {'state': array([[0, 0, 0, 2, 2, 4, 5, 6, 5, 5, 4, 2, 3, 1, 0],
       [0, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 2, 0, 1, 2]]), 'area': 483.0, 'delay': 0.7954000000000001}, {'state': array([[0, 0, 0, 2, 2, 4, 4, 6, 5, 5, 4, 3, 2, 1, 0],
       [0, 1, 2, 0, 2, 1, 2, 0, 1, 0, 0, 1, 1, 1, 2]]), 'area': 479.75, 'delay': 0.766975}, {'state': array([[0, 0, 1, 2, 2, 4, 4, 6, 5, 5, 4, 3, 3, 1, 0],
       [0, 1, 1, 0, 2, 0, 2, 0, 1, 0, 1, 1, 0, 1, 2]]), 'area': 486.5, 'delay': 0.7210500000000001}, {'state': array([[0, 0, 1, 2, 2, 4, 4, 6, 5, 5, 4, 3, 2, 1, 0],
       [0, 1, 1, 0, 2, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2]]), 'area': 483.0, 'delay': 0.72105}, {'state': array([[0, 0, 1, 2, 2, 4, 4, 6, 5, 5, 4, 3, 2, 1, 0],
       [0, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2]]), 'area': 480.0, 'delay': 0.72105}, {'state': array([[0, 0, 1, 2, 2, 4, 4, 6, 5, 5, 4, 3, 2, 1, 0],
       [0, 1, 0, 0, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2]]), 'area': 477.25, 'delay': 0.72105}, {'state': array([[0, 0, 1, 1, 2, 4, 4, 6, 5, 5, 4, 3, 2, 1, 0],
       [0, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2]]), 'area': 473.5, 'delay': 0.72105}], maxlen=20)

    16 bits
    数据地址: outputs/2023-09-18/15-13-21/logger_log/dqn_16bits/dqn16bits_reset/dqn16bits_reset_2023_09_18_15_13_27_0000--s-0/itr_250.npy
deque([{'state': array([[0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 1],
       [0, 0, 0, 1, 1, 2, 2, 2, 3, 2, 3, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 3]]), 'area': 2090.25, 'delay': 1.57515}, {'state': array([[0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 7, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 1],
       [0, 0, 0, 1, 1, 2, 2, 2, 3, 2, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 3]]), 'area': 2093.75, 'delay': 1.5751499999999998}, {'state': array([[0, 0, 1, 1, 2, 2, 3, 3, 3, 5, 4, 5, 6, 6, 6, 8, 7, 7, 7, 7, 7, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 1],
       [0, 0, 0, 1, 0, 1, 1, 2, 3, 1, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 3]]), 'area': 2092.25, 'delay': 1.5376750000000001}, {'state': array([[0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 7, 7, 7, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 1],
       [0, 0, 0, 1, 0, 1, 1, 2, 3, 2, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 3]]), 'area': 2088.75, 'delay': 1.5308249999999999}, {'state': array([[0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 7, 7, 7, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 1],
       [0, 0, 0, 1, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 3]]), 'area': 2080.25, 'delay': 1.53925}, {'state': array([[0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 7, 7, 7, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 1, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2079.0, 'delay': 1.5387250000000001}, {'state': array([[0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 7, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 1, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2075.5, 'delay': 1.538725}, {'state': array([[0, 0, 0, 1, 2, 2, 3, 2, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 8, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 1, 0, 0, 0, 2, 3, 2, 3, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2075.5, 'delay': 1.5024250000000001}, {'state': array([[0, 0, 0, 1, 2, 2, 3, 2, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 8, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 3, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2072.5, 'delay': 1.502425}, {'state': array([[0, 0, 0, 0, 2, 2, 3, 2, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 8, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 2, 0, 0, 0, 2, 2, 2, 3, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2069.0, 'delay': 1.502425}, {'state': array([[0, 0, 0, 0, 2, 1, 3, 2, 3, 4, 4, 5, 6, 6, 6, 8, 7, 7, 8, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 2, 0, 2, 0, 2, 2, 2, 3, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2068.25, 'delay': 1.502425}, {'state': array([[0, 0, 0, 1, 2, 2, 3, 2, 3, 3, 4, 5, 6, 6, 6, 8, 7, 7, 8, 7, 6, 6,
        5, 5, 4, 3, 4, 2, 2, 1, 1, 2],
       [0, 0, 1, 1, 0, 0, 0, 2, 2, 3, 3, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1,
        2, 1, 2, 3, 1, 3, 3, 4, 4, 2]]), 'area': 2069.0, 'delay': 1.4935749999999999}, {'state': array([[0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 4, 5, 6, 6, 6, 7, 7, 7, 8, 7, 6, 6,
        5, 5, 4, 4, 4, 2, 3, 1, 1, 1],
       [0, 0, 1, 1, 0, 0, 1, 2, 2, 3, 3, 2, 1, 1, 2, 1, 1, 1, 0, 1, 2, 1,
        2, 1, 2, 2, 1, 4, 2, 4, 4, 3]]), 'area': 2069.5, 'delay': 1.489675}, {'state': array([[0, 0, 0, 0, 2, 2, 2, 2, 3, 4, 5, 4, 6, 6, 6, 7, 7, 7, 8, 7, 6, 6,
        6, 5, 4, 4, 4, 1, 3, 1, 1, 0],
       [0, 0, 1, 2, 0, 0, 1, 2, 2, 1, 1, 3, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2,
        1, 1, 2, 1, 1, 5, 2, 4, 4, 5]]), 'area': 2063.25, 'delay': 1.49265}, {'state': array([[0, 0, 0, 0, 2, 2, 2, 2, 3, 4, 5, 4, 6, 6, 6, 7, 7, 7, 8, 7, 6, 6,
        6, 5, 4, 4, 4, 1, 3, 1, 1, 0],
       [0, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 3, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2,
        1, 1, 2, 1, 1, 5, 2, 4, 4, 5]]), 'area': 2060.25, 'delay': 1.4865}, {'state': array([[0, 0, 0, 0, 2, 2, 2, 2, 3, 4, 5, 4, 6, 6, 6, 7, 7, 7, 8, 7, 6, 6,
        6, 5, 4, 4, 3, 1, 3, 1, 1, 0],
       [0, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 3, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2,
        1, 1, 2, 1, 2, 5, 2, 4, 4, 5]]), 'area': 2056.75, 'delay': 1.4865000000000002}, {'state': array([[0, 0, 0, 0, 2, 2, 2, 2, 3, 4, 5, 3, 6, 6, 6, 7, 7, 7, 8, 7, 6, 6,
        6, 5, 4, 4, 3, 1, 3, 1, 1, 0],
       [0, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 4, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2,
        1, 1, 2, 1, 2, 5, 2, 4, 4, 5]]), 'area': 2053.5, 'delay': 1.4831750000000001}], maxlen=20)    
"""
