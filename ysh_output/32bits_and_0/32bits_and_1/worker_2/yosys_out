
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.50+14 (git sha1 98f0ddd63, clang++ 18.1.8 -fPIC -O3)

-- Executing script file `ysh_output/32bits_and_0/32bits_and_1/worker_2/yosys.ys' --

1. Executing Verilog-2005 frontend: ysh_output/32bits_and_0/32bits_and_1/MUL.v
Parsing SystemVerilog input from `ysh_output/32bits_and_0/32bits_and_1/MUL.v' to AST representation.
Storing AST representation for module `$abstract\FA'.
Storing AST representation for module `$abstract\FA_1'.
Storing AST representation for module `$abstract\LUT3'.
Storing AST representation for module `$abstract\FA_LUT'.
Storing AST representation for module `$abstract\HA'.
Storing AST representation for module `$abstract\LUT2'.
Storing AST representation for module `$abstract\HA_LUT'.
Storing AST representation for module `$abstract\production'.
Storing AST representation for module `$abstract\Compressor_Tree'.
Storing AST representation for module `$abstract\MUL'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\MUL'.
Generating RTLIL representation for module `\MUL'.

2.2.1. Analyzing design hierarchy..
Top module:  \MUL

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Compressor_Tree'.
Generating RTLIL representation for module `\Compressor_Tree'.

2.2.3. Analyzing design hierarchy..
Top module:  \MUL
Used module:     \Compressor_Tree

2.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\HA'.
Generating RTLIL representation for module `\HA'.

2.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\FA'.
Generating RTLIL representation for module `\FA'.

2.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\production'.
Generating RTLIL representation for module `\production'.

2.2.7. Analyzing design hierarchy..
Top module:  \MUL
Used module:     \Compressor_Tree
Used module:         \HA
Used module:         \FA
Used module:         \production

2.2.8. Analyzing design hierarchy..
Top module:  \MUL
Used module:     \Compressor_Tree
Used module:         \HA
Used module:         \FA
Used module:         \production
Removing unused module `$abstract\MUL'.
Removing unused module `$abstract\Compressor_Tree'.
Removing unused module `$abstract\production'.
Removing unused module `$abstract\HA_LUT'.
Removing unused module `$abstract\LUT2'.
Removing unused module `$abstract\HA'.
Removing unused module `$abstract\FA_LUT'.
Removing unused module `$abstract\LUT3'.
Removing unused module `$abstract\FA_1'.
Removing unused module `$abstract\FA'.
Removed 10 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module production.
Optimizing module FA.
Optimizing module HA.
Optimizing module Compressor_Tree.
Optimizing module MUL.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module production.
Optimizing module FA.
Optimizing module HA.
Optimizing module Compressor_Tree.
Optimizing module MUL.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \production..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \MUL..
Removed 0 unused cells and 1034 unused wires.
<suppressed ~4 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module Compressor_Tree...
Checking module FA...
Checking module HA...
Checking module MUL...
Checking module production...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Compressor_Tree..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \HA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MUL..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \production..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Compressor_Tree.
  Optimizing cells in module \FA.
  Optimizing cells in module \HA.
  Optimizing cells in module \MUL.
  Optimizing cells in module \production.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Compressor_Tree..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \HA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MUL..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \production..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Compressor_Tree.
  Optimizing cells in module \FA.
  Optimizing cells in module \HA.
  Optimizing cells in module \MUL.
  Optimizing cells in module \production.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Compressor_Tree:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module FA:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module HA:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module MUL:
  creating $macc model for $add$ysh_output/32bits_and_0/32bits_and_1/MUL.v:3283$1 ($add).
  creating $alu model for $macc $add$ysh_output/32bits_and_0/32bits_and_1/MUL.v:3283$1.
  creating $alu cell for $add$ysh_output/32bits_and_0/32bits_and_1/MUL.v:3283$1: $auto$alumacc.cc:495:replace_alu$1035
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module production:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Compressor_Tree..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \HA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MUL..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \production..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Compressor_Tree.
  Optimizing cells in module \FA.
  Optimizing cells in module \HA.
  Optimizing cells in module \MUL.
  Optimizing cells in module \production.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
<suppressed ~1 debug messages>
Optimizing module production.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Compressor_Tree..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \HA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MUL..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \production..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Compressor_Tree.
  Optimizing cells in module \FA.
  Optimizing cells in module \HA.
  Optimizing cells in module \MUL.
  Optimizing cells in module \production.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
Optimizing module production.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /home/qiu/ProgramFiles/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/qiu/ProgramFiles/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using template $paramod$eb9f70af72509895cd1a2b6e15159b78591ad185\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1539 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Compressor_Tree.
Optimizing module FA.
Optimizing module HA.
Optimizing module MUL.
<suppressed ~62 debug messages>
Optimizing module production.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Compressor_Tree'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\HA'.
Finding identical cells in module `\MUL'.
Finding identical cells in module `\production'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Compressor_Tree..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \HA..
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \production..
Removed 58 unused cells and 27 unused wires.
<suppressed ~59 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\Compressor_Tree' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.23.2. Extracting gate netlist of module `\FA' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 10 wires to a netlist network with 3 inputs and 2 outputs.

2.23.2.1. Executing ABC.
ERROR: Can't open ABC output file `/tmp/yosys-abc-x8ApfH/output.blif'.
